import { test, expect } from "vitest";
import { HandRank, roughHandScoreToHandRank } from "../src/lib/types";
test("roughHandScoreToHandRank even multiple of 10^14", () => {
  const highcard = 1 * 10 ** 14;
  const pair = 2 * 10 ** 14;
  const twoPair = 3 * 10 ** 14;
  const trips = 4 * 10 ** 14;
  const straight = 5 * 10 ** 14;
  const flush = 6 * 10 ** 14;
  const fullHouse = 7 * 10 ** 14;
  const quads = 8 * 10 ** 14;
  const straightFlush = 9 * 10 ** 14;
  const royalFlush = 10 * 10 ** 14;
  let result = roughHandScoreToHandRank(highcard);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.HighCard]);
  result = roughHandScoreToHandRank(pair);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.Pair]);
  result = roughHandScoreToHandRank(twoPair);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.TwoPair]);
  result = roughHandScoreToHandRank(trips);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.ThreeOfAKind]);
  result = roughHandScoreToHandRank(straight);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.Straight]);
  result = roughHandScoreToHandRank(flush);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.Flush]);
  result = roughHandScoreToHandRank(fullHouse);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.FullHouse]);
  result = roughHandScoreToHandRank(quads);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.FourOfAKind]);
  result = roughHandScoreToHandRank(straightFlush);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.StraightFlush]);
  result = roughHandScoreToHandRank(royalFlush);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.RoyalFlush]);
});

test("roughHandScoreToHandRank even multiple of 10^14 plus random num < 10^14", () => {
  const highcard = 1 * 10 ** 14 + 2928340982903;
  const pair = 2 * 10 ** 14 + 90928340982903;
  const twoPair = 3 * 10 ** 14 + 8928340982903;
  const trips = 4 * 10 ** 14 + 1928340982903;
  const straight = 5 * 10 ** 14 + 6928340982903;
  const flush = 6 * 10 ** 14 + 7909829340;
  const fullHouse = 7 * 10 ** 14 + 92834093482903;
  const quads = 8 * 10 ** 14 + 9283409829203;
  const straightFlush = 9 * 10 ** 14 + 19283140982903;
  const royalFlush = 10 * 10 ** 14 + 4928340982903;
  let result = roughHandScoreToHandRank(highcard);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.HighCard]);
  result = roughHandScoreToHandRank(pair);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.Pair]);
  result = roughHandScoreToHandRank(twoPair);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.TwoPair]);
  result = roughHandScoreToHandRank(trips);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.ThreeOfAKind]);
  result = roughHandScoreToHandRank(straight);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.Straight]);
  result = roughHandScoreToHandRank(flush);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.Flush]);
  result = roughHandScoreToHandRank(fullHouse);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.FullHouse]);
  result = roughHandScoreToHandRank(quads);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.FourOfAKind]);
  result = roughHandScoreToHandRank(straightFlush);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.StraightFlush]);
  result = roughHandScoreToHandRank(royalFlush);
  console.log("result", result);
  expect(result).toBe(HandRank[HandRank.RoyalFlush]);
});
